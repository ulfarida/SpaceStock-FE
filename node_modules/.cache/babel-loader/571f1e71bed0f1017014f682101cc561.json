{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validate = validate;\nexports.typeIs = typeIs;\nexports.validateType = validateType;\nexports.validateOptional = validateOptional;\nexports.validateOptionalType = validateOptionalType;\nexports.arrayOf = arrayOf;\nexports.arrayOfType = arrayOfType;\nexports.validateArrayOfType = validateArrayOfType;\nexports.assertEach = assertEach;\nexports.assertOneOf = assertOneOf;\nexports.assertNodeType = assertNodeType;\nexports.assertNodeOrValueType = assertNodeOrValueType;\nexports.assertValueType = assertValueType;\nexports.assertShape = assertShape;\nexports.chain = chain;\nexports.default = defineType;\nexports.NODE_PARENT_VALIDATIONS = exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.NODE_FIELDS = exports.FLIPPED_ALIAS_KEYS = exports.ALIAS_KEYS = exports.VISITOR_KEYS = void 0;\n\nvar _is = _interopRequireDefault(require(\"../validators/is\"));\n\nvar _validate = require(\"../validators/validate\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst VISITOR_KEYS = {};\nexports.VISITOR_KEYS = VISITOR_KEYS;\nconst ALIAS_KEYS = {};\nexports.ALIAS_KEYS = ALIAS_KEYS;\nconst FLIPPED_ALIAS_KEYS = {};\nexports.FLIPPED_ALIAS_KEYS = FLIPPED_ALIAS_KEYS;\nconst NODE_FIELDS = {};\nexports.NODE_FIELDS = NODE_FIELDS;\nconst BUILDER_KEYS = {};\nexports.BUILDER_KEYS = BUILDER_KEYS;\nconst DEPRECATED_KEYS = {};\nexports.DEPRECATED_KEYS = DEPRECATED_KEYS;\nconst NODE_PARENT_VALIDATIONS = {};\nexports.NODE_PARENT_VALIDATIONS = NODE_PARENT_VALIDATIONS;\n\nfunction getType(val) {\n  if (Array.isArray(val)) {\n    return \"array\";\n  } else if (val === null) {\n    return \"null\";\n  } else {\n    return typeof val;\n  }\n}\n\nfunction validate(validate) {\n  return {\n    validate\n  };\n}\n\nfunction typeIs(typeName) {\n  return typeof typeName === \"string\" ? assertNodeType(typeName) : assertNodeType(...typeName);\n}\n\nfunction validateType(typeName) {\n  return validate(typeIs(typeName));\n}\n\nfunction validateOptional(validate) {\n  return {\n    validate,\n    optional: true\n  };\n}\n\nfunction validateOptionalType(typeName) {\n  return {\n    validate: typeIs(typeName),\n    optional: true\n  };\n}\n\nfunction arrayOf(elementType) {\n  return chain(assertValueType(\"array\"), assertEach(elementType));\n}\n\nfunction arrayOfType(typeName) {\n  return arrayOf(typeIs(typeName));\n}\n\nfunction validateArrayOfType(typeName) {\n  return validate(arrayOfType(typeName));\n}\n\nfunction assertEach(callback) {\n  function validator(node, key, val) {\n    if (!Array.isArray(val)) return;\n\n    for (let i = 0; i < val.length; i++) {\n      const subkey = `${key}[${i}]`;\n      const v = val[i];\n      callback(node, subkey, v);\n      if (process.env.BABEL_TYPES_8_BREAKING) (0, _validate.validateChild)(node, subkey, v);\n    }\n  }\n\n  validator.each = callback;\n  return validator;\n}\n\nfunction assertOneOf(...values) {\n  function validate(node, key, val) {\n    if (values.indexOf(val) < 0) {\n      throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);\n    }\n  }\n\n  validate.oneOf = values;\n  return validate;\n}\n\nfunction assertNodeType(...types) {\n  function validate(node, key, val) {\n    for (const type of types) {\n      if ((0, _is.default)(type, val)) {\n        (0, _validate.validateChild)(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val && val.type)}`);\n  }\n\n  validate.oneOfNodeTypes = types;\n  return validate;\n}\n\nfunction assertNodeOrValueType(...types) {\n  function validate(node, key, val) {\n    for (const type of types) {\n      if (getType(val) === type || (0, _is.default)(type, val)) {\n        (0, _validate.validateChild)(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val && val.type)}`);\n  }\n\n  validate.oneOfNodeOrValueTypes = types;\n  return validate;\n}\n\nfunction assertValueType(type) {\n  function validate(node, key, val) {\n    const valid = getType(val) === type;\n\n    if (!valid) {\n      throw new TypeError(`Property ${key} expected type of ${type} but got ${getType(val)}`);\n    }\n  }\n\n  validate.type = type;\n  return validate;\n}\n\nfunction assertShape(shape) {\n  function validate(node, key, val) {\n    const errors = [];\n\n    for (const property of Object.keys(shape)) {\n      try {\n        (0, _validate.validateField)(node, property, val[property], shape[property]);\n      } catch (error) {\n        if (error instanceof TypeError) {\n          errors.push(error.message);\n          continue;\n        }\n\n        throw error;\n      }\n    }\n\n    if (errors.length) {\n      throw new TypeError(`Property ${key} of ${node.type} expected to have the following:\\n${errors.join(\"\\n\")}`);\n    }\n  }\n\n  validate.shapeOf = shape;\n  return validate;\n}\n\nfunction chain(...fns) {\n  function validate(...args) {\n    for (const fn of fns) {\n      fn(...args);\n    }\n  }\n\n  validate.chainOf = fns;\n  return validate;\n}\n\nconst validTypeOpts = [\"aliases\", \"builder\", \"deprecatedAlias\", \"fields\", \"inherits\", \"visitor\", \"validate\"];\nconst validFieldKeys = [\"default\", \"optional\", \"validate\"];\n\nfunction defineType(type, opts = {}) {\n  const inherits = opts.inherits && store[opts.inherits] || {};\n  let fields = opts.fields;\n\n  if (!fields) {\n    fields = {};\n\n    if (inherits.fields) {\n      const keys = Object.getOwnPropertyNames(inherits.fields);\n\n      for (const key of keys) {\n        const field = inherits.fields[key];\n        fields[key] = {\n          default: field.default,\n          optional: field.optional,\n          validate: field.validate\n        };\n      }\n    }\n  }\n\n  const visitor = opts.visitor || inherits.visitor || [];\n  const aliases = opts.aliases || inherits.aliases || [];\n  const builder = opts.builder || inherits.builder || opts.visitor || [];\n\n  for (const k of Object.keys(opts)) {\n    if (validTypeOpts.indexOf(k) === -1) {\n      throw new Error(`Unknown type option \"${k}\" on ${type}`);\n    }\n  }\n\n  if (opts.deprecatedAlias) {\n    DEPRECATED_KEYS[opts.deprecatedAlias] = type;\n  }\n\n  for (const key of visitor.concat(builder)) {\n    fields[key] = fields[key] || {};\n  }\n\n  for (const key of Object.keys(fields)) {\n    const field = fields[key];\n\n    if (field.default !== undefined && builder.indexOf(key) === -1) {\n      field.optional = true;\n    }\n\n    if (field.default === undefined) {\n      field.default = null;\n    } else if (!field.validate && field.default != null) {\n      field.validate = assertValueType(getType(field.default));\n    }\n\n    for (const k of Object.keys(field)) {\n      if (validFieldKeys.indexOf(k) === -1) {\n        throw new Error(`Unknown field key \"${k}\" on ${type}.${key}`);\n      }\n    }\n  }\n\n  VISITOR_KEYS[type] = opts.visitor = visitor;\n  BUILDER_KEYS[type] = opts.builder = builder;\n  NODE_FIELDS[type] = opts.fields = fields;\n  ALIAS_KEYS[type] = opts.aliases = aliases;\n  aliases.forEach(alias => {\n    FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];\n    FLIPPED_ALIAS_KEYS[alias].push(type);\n  });\n\n  if (opts.validate) {\n    NODE_PARENT_VALIDATIONS[type] = opts.validate;\n  }\n\n  store[type] = opts;\n}\n\nconst store = {};","map":{"version":3,"sources":["/home/alta7/Documents/Alterra-Academy/Alterra Academy/SpaceStock/SpaceStock-FE/node_modules/@babel/types/lib/definitions/utils.js"],"names":["Object","defineProperty","exports","value","validate","typeIs","validateType","validateOptional","validateOptionalType","arrayOf","arrayOfType","validateArrayOfType","assertEach","assertOneOf","assertNodeType","assertNodeOrValueType","assertValueType","assertShape","chain","default","defineType","NODE_PARENT_VALIDATIONS","DEPRECATED_KEYS","BUILDER_KEYS","NODE_FIELDS","FLIPPED_ALIAS_KEYS","ALIAS_KEYS","VISITOR_KEYS","_is","_interopRequireDefault","require","_validate","obj","__esModule","getType","val","Array","isArray","typeName","optional","elementType","callback","validator","node","key","i","length","subkey","v","process","env","BABEL_TYPES_8_BREAKING","validateChild","each","values","indexOf","TypeError","JSON","stringify","oneOf","types","type","oneOfNodeTypes","oneOfNodeOrValueTypes","valid","shape","errors","property","keys","validateField","error","push","message","join","shapeOf","fns","args","fn","chainOf","validTypeOpts","validFieldKeys","opts","inherits","store","fields","getOwnPropertyNames","field","visitor","aliases","builder","k","Error","deprecatedAlias","concat","undefined","forEach","alias"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validate = validate;\nexports.typeIs = typeIs;\nexports.validateType = validateType;\nexports.validateOptional = validateOptional;\nexports.validateOptionalType = validateOptionalType;\nexports.arrayOf = arrayOf;\nexports.arrayOfType = arrayOfType;\nexports.validateArrayOfType = validateArrayOfType;\nexports.assertEach = assertEach;\nexports.assertOneOf = assertOneOf;\nexports.assertNodeType = assertNodeType;\nexports.assertNodeOrValueType = assertNodeOrValueType;\nexports.assertValueType = assertValueType;\nexports.assertShape = assertShape;\nexports.chain = chain;\nexports.default = defineType;\nexports.NODE_PARENT_VALIDATIONS = exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.NODE_FIELDS = exports.FLIPPED_ALIAS_KEYS = exports.ALIAS_KEYS = exports.VISITOR_KEYS = void 0;\n\nvar _is = _interopRequireDefault(require(\"../validators/is\"));\n\nvar _validate = require(\"../validators/validate\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst VISITOR_KEYS = {};\nexports.VISITOR_KEYS = VISITOR_KEYS;\nconst ALIAS_KEYS = {};\nexports.ALIAS_KEYS = ALIAS_KEYS;\nconst FLIPPED_ALIAS_KEYS = {};\nexports.FLIPPED_ALIAS_KEYS = FLIPPED_ALIAS_KEYS;\nconst NODE_FIELDS = {};\nexports.NODE_FIELDS = NODE_FIELDS;\nconst BUILDER_KEYS = {};\nexports.BUILDER_KEYS = BUILDER_KEYS;\nconst DEPRECATED_KEYS = {};\nexports.DEPRECATED_KEYS = DEPRECATED_KEYS;\nconst NODE_PARENT_VALIDATIONS = {};\nexports.NODE_PARENT_VALIDATIONS = NODE_PARENT_VALIDATIONS;\n\nfunction getType(val) {\n  if (Array.isArray(val)) {\n    return \"array\";\n  } else if (val === null) {\n    return \"null\";\n  } else {\n    return typeof val;\n  }\n}\n\nfunction validate(validate) {\n  return {\n    validate\n  };\n}\n\nfunction typeIs(typeName) {\n  return typeof typeName === \"string\" ? assertNodeType(typeName) : assertNodeType(...typeName);\n}\n\nfunction validateType(typeName) {\n  return validate(typeIs(typeName));\n}\n\nfunction validateOptional(validate) {\n  return {\n    validate,\n    optional: true\n  };\n}\n\nfunction validateOptionalType(typeName) {\n  return {\n    validate: typeIs(typeName),\n    optional: true\n  };\n}\n\nfunction arrayOf(elementType) {\n  return chain(assertValueType(\"array\"), assertEach(elementType));\n}\n\nfunction arrayOfType(typeName) {\n  return arrayOf(typeIs(typeName));\n}\n\nfunction validateArrayOfType(typeName) {\n  return validate(arrayOfType(typeName));\n}\n\nfunction assertEach(callback) {\n  function validator(node, key, val) {\n    if (!Array.isArray(val)) return;\n\n    for (let i = 0; i < val.length; i++) {\n      const subkey = `${key}[${i}]`;\n      const v = val[i];\n      callback(node, subkey, v);\n      if (process.env.BABEL_TYPES_8_BREAKING) (0, _validate.validateChild)(node, subkey, v);\n    }\n  }\n\n  validator.each = callback;\n  return validator;\n}\n\nfunction assertOneOf(...values) {\n  function validate(node, key, val) {\n    if (values.indexOf(val) < 0) {\n      throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);\n    }\n  }\n\n  validate.oneOf = values;\n  return validate;\n}\n\nfunction assertNodeType(...types) {\n  function validate(node, key, val) {\n    for (const type of types) {\n      if ((0, _is.default)(type, val)) {\n        (0, _validate.validateChild)(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val && val.type)}`);\n  }\n\n  validate.oneOfNodeTypes = types;\n  return validate;\n}\n\nfunction assertNodeOrValueType(...types) {\n  function validate(node, key, val) {\n    for (const type of types) {\n      if (getType(val) === type || (0, _is.default)(type, val)) {\n        (0, _validate.validateChild)(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val && val.type)}`);\n  }\n\n  validate.oneOfNodeOrValueTypes = types;\n  return validate;\n}\n\nfunction assertValueType(type) {\n  function validate(node, key, val) {\n    const valid = getType(val) === type;\n\n    if (!valid) {\n      throw new TypeError(`Property ${key} expected type of ${type} but got ${getType(val)}`);\n    }\n  }\n\n  validate.type = type;\n  return validate;\n}\n\nfunction assertShape(shape) {\n  function validate(node, key, val) {\n    const errors = [];\n\n    for (const property of Object.keys(shape)) {\n      try {\n        (0, _validate.validateField)(node, property, val[property], shape[property]);\n      } catch (error) {\n        if (error instanceof TypeError) {\n          errors.push(error.message);\n          continue;\n        }\n\n        throw error;\n      }\n    }\n\n    if (errors.length) {\n      throw new TypeError(`Property ${key} of ${node.type} expected to have the following:\\n${errors.join(\"\\n\")}`);\n    }\n  }\n\n  validate.shapeOf = shape;\n  return validate;\n}\n\nfunction chain(...fns) {\n  function validate(...args) {\n    for (const fn of fns) {\n      fn(...args);\n    }\n  }\n\n  validate.chainOf = fns;\n  return validate;\n}\n\nconst validTypeOpts = [\"aliases\", \"builder\", \"deprecatedAlias\", \"fields\", \"inherits\", \"visitor\", \"validate\"];\nconst validFieldKeys = [\"default\", \"optional\", \"validate\"];\n\nfunction defineType(type, opts = {}) {\n  const inherits = opts.inherits && store[opts.inherits] || {};\n  let fields = opts.fields;\n\n  if (!fields) {\n    fields = {};\n\n    if (inherits.fields) {\n      const keys = Object.getOwnPropertyNames(inherits.fields);\n\n      for (const key of keys) {\n        const field = inherits.fields[key];\n        fields[key] = {\n          default: field.default,\n          optional: field.optional,\n          validate: field.validate\n        };\n      }\n    }\n  }\n\n  const visitor = opts.visitor || inherits.visitor || [];\n  const aliases = opts.aliases || inherits.aliases || [];\n  const builder = opts.builder || inherits.builder || opts.visitor || [];\n\n  for (const k of Object.keys(opts)) {\n    if (validTypeOpts.indexOf(k) === -1) {\n      throw new Error(`Unknown type option \"${k}\" on ${type}`);\n    }\n  }\n\n  if (opts.deprecatedAlias) {\n    DEPRECATED_KEYS[opts.deprecatedAlias] = type;\n  }\n\n  for (const key of visitor.concat(builder)) {\n    fields[key] = fields[key] || {};\n  }\n\n  for (const key of Object.keys(fields)) {\n    const field = fields[key];\n\n    if (field.default !== undefined && builder.indexOf(key) === -1) {\n      field.optional = true;\n    }\n\n    if (field.default === undefined) {\n      field.default = null;\n    } else if (!field.validate && field.default != null) {\n      field.validate = assertValueType(getType(field.default));\n    }\n\n    for (const k of Object.keys(field)) {\n      if (validFieldKeys.indexOf(k) === -1) {\n        throw new Error(`Unknown field key \"${k}\" on ${type}.${key}`);\n      }\n    }\n  }\n\n  VISITOR_KEYS[type] = opts.visitor = visitor;\n  BUILDER_KEYS[type] = opts.builder = builder;\n  NODE_FIELDS[type] = opts.fields = fields;\n  ALIAS_KEYS[type] = opts.aliases = aliases;\n  aliases.forEach(alias => {\n    FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];\n    FLIPPED_ALIAS_KEYS[alias].push(type);\n  });\n\n  if (opts.validate) {\n    NODE_PARENT_VALIDATIONS[type] = opts.validate;\n  }\n\n  store[type] = opts;\n}\n\nconst store = {};"]},"metadata":{},"sourceType":"script"}